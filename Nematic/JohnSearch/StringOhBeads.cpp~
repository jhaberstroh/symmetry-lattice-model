/*--------------------------------------------------------------------------
** This String of Beads class utilizes the Bead class, and implements parts 
** of the string method in an object oriented manner.

** It is intentionally left extensible to allow for modification of initial
** condition assumptions about how the string is strung, but currently
** only utilizes a direct connection.

  --------------------------------------------------------------------------*/

#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include "StringOhBeads.h"

using namespace std;

//CLASS CONSTRUCTORS
StringOhBeads::StringOhBeads(){
  int length = 50;
  double pStart = 0.01;
  double tStart = 0.01;
  double oStart = 0.01;
  double pEnd   = 0.99;
  double tEnd   = 0.01; 
  double oEnd   = 0.99;
  Connection c = DIRECT;
  double timestep = .01;
  
  beads = new Bead *[length];
  g     = new double[length];
  arc_p = new double[length];
  len = length;
  
  double curr_p,curr_t,curr_o;
  
  for (int i=0; i<length;i++){
    //A target arc_position for bead[i];
    //Used to force the string to have consistent arc-lengths
    g[i] = (1.0 / length) * i;
    
    switch(c){
    case DIRECT:
      //draws a straight line! BAM!
      curr_p = pStart * (1-g[i]) + pEnd * g[i];
      curr_t = tStart * (1-g[i]) + tEnd * g[i];
      curr_o = oStart * (1-g[i]) + oEnd * g[i];
      
      beads[i] = new Bead(curr_p,curr_t,curr_o,timestep);
      break;
    default:
      break;
    }    
  }
}

StringOhBeads::StringOhBeads(int length,
                             double pStart, double tStart, double oStart,
                             double pEnd  , double tEnd,   double oEnd ,
                             Connection c){
  
  double timestep = .01;

  beads = new Bead *[length];
  g     = new double[length];
  arc_p = new double[length];
  len = length;
  
  double curr_p,curr_t,curr_o;
  
  for (int i=0; i<length;i++){
    //A target arc_position for bead[i];
    //Used to force the string to have consistent arc-lengths
    g[i] = (1.0 / length) * i;
    
    switch(c){
    case DIRECT:
      //draws a straight line! BAM!
      curr_p = pStart * (1-g[i]) + pEnd * g[i];
      curr_t = tStart * (1-g[i]) + tEnd * g[i];
      curr_o = oStart * (1-g[i]) + oEnd * g[i];

      beads[i] = new Bead(curr_p,curr_t,curr_o,timestep);
      break;
    default:
      break;
    }    
  }
}


StringOhBeads::~StringOhBeads(){
  for (int i = 0; i < len ; i++){
    delete beads[i];
  }
  delete [] beads;
  delete [] g;        //interpolation position in the interval [0,1]
  delete [] arc_p;    //position along unit-normalized arc-length; [0,1]
  
}

void StringOhBeads::string_heun_step(double T, int R,
                                     double J, double Q, double Q2){
  for (int i = 0; i < len ; i++){
    beads[i]->heun_step(T, R, J, Q, Q2);
  }
  
  impose_arclength();
  
}

void StringOhBeads::print_string_pos(){
  double printPhi, printTau, printOmg;

  for (int i = 0; i < len ; i++){
    printPhi = beads[i]->getP();
    printTau = beads[i]->getT();
    printOmg = beads[i]->getO();

    cout << "bead #" << (i+1) << "\n";
    cout << "\tphi:\t" << printPhi << "\ttau:\t" << printTau << "\tomega:\t" << printOmg << "\n";
  }

}




/*--------------------------------------------------------------------------
** The following two functions comprise the majority of the functionality of 
** the string method; they impose the boundary condition which causes the
** algorithm to function properly.
--------------------------------------------------------------------------*/



// Performs the interpolation for the bead positions
// 1) Arc lengths must be computed and normalized
// 2) Absolute positions must not have changed
// This function actually changes the positions of the beads.
void StringOhBeads::interpolate_beads(){
  
  old_p = new double [len];
  old_t = new double [len];
  old_o = new double [len];
  for (int i = 0; i<len ; i++){
    old_p[i] = beads[i]->getP();
    old_t[i] = beads[i]->getT();
    old_o[i] = beads[i]->getO();
  }
  
  int j;       //for controlling a while loop inside the for loop
  double pct;  //percentage to the next bead, for interpolation
  
  for (int i = 0; i<len ; i++){
    if (arc_p[0] >= g[i]){ //to prevent failure of the while loop
      beads[i]->setP(old_p[0]);
      beads[i]->setT(old_t[0]);
      beads[i]->setO(old_o[0]);
    }
    else if (g[i] >= arc_p[len-1]){ //to prevent failure of the while loop
      beads[i]->setP(old_p[len-1]);
      beads[i]->setT(old_t[len-1]);
      beads[i]->setO(old_o[len-1]);
    }
    else{
      j = 0;
      
      while (j <= len-1){
        if (arc_p[j] >= g[i])  break;
        j++;
      }
      
      pct = (g[i] - arc_p[j-1])/(arc_p[j] - arc_p[j-1]);
      
      beads[i]->setP(old_p[j-1] *(1-pct) + old_p[j] * pct);
      beads[i]->setT(old_t[j-1] *(1-pct) + old_t[j] * pct);
      beads[i]->setO(old_o[j-1] *(1-pct) + old_o[j] * pct);
    }
  }
  
  delete [] old_p;
  delete [] old_t;
  delete [] old_o;
  
}

// After taking heun steps, we want to require that all arclengths along
// the string are equal, and this function imposes that condition
// by interpolating new positions for the beads
// ** This function physically moves the bead locations!

void StringOhBeads::impose_arclength(){
  double delp, delt, delo; //relative distances
  
  arc_p[0] = 0;
  
  //find cumulative arc length along curve
  for (int i = 1; i<len ; i++){
    delp = beads[i]->getP() - beads[i-1]->getP();
    delt = beads[i]->getT() - beads[i-1]->getT();
    delo = beads[i]->getO() - beads[i-1]->getO();
    
    arc_p[i] = arc_p[i-1] + sqrt(delp*delp + delt * delt + delo*delo);
  }
  
  // Arc lengths should be normalized for comparison to g.
  // This sets the final arc_p = 1.
  for (int i = 1; i<len ; i++){
    arc_p[i] /= arc_p[len-1];
  }
  
  interpolate_beads();
  
}

/*--------------------------------------------------------------------------
** End primary functions
--------------------------------------------------------------------------*/




